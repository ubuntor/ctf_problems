from PIL import Image
import string
import os
dirname = os.path.dirname(__file__)

im = Image.open(os.path.join(dirname, 'tiles.png'))

header = '''#include "pm.h"
#include <stdint.h>

#define M_STOP 0xFFFF
#define M_QUARTER_DUTY 0x100
#define M_HALF_VOLUME 0x200
#define M_VIBRATO 0x400

// starts at C1
const _rom uint16_t presets[] = {
    61155, 57723, 54483, 51425, 48539, 45814, 43243, 40816,
    38525, 36363, 34322, 32395, 30577, 28861, 27241, 25712,
    24269, 22907, 21621, 20407, 19262, 18181, 17160, 16197,
    15288, 14430, 13620, 12855, 12134, 11453, 10810, 10203,
    9630, 9090, 8580, 8098, 7644, 7214, 6809, 6427,
    6066, 5726, 5404, 5101, 4815, 4544, 4289, 4049,
    3821, 3607, 3404, 3213, 3033, 2862, 2702, 2550,
    2407, 2272, 2144, 2024, 1910, 1803, 1702, 1606,
    1516, 1431, 1350, 1275, 1203, 1135, 1072, 1011,
    955, 901, 850, 803, 757, 715, 675, 637,
    601, 567, 535, 505, 477, 450, 425, 401,
    378, 357, 337, 318, 300, 283, 267, 252,
    238, 224, 212, 200, 189, 178, 168, 158,
    149, 141, 133, 126, 118, 112, 105, 99,
    94, 88, 83, 79, 74, 70, 66, 62,
    59, 55, 52, 49, 46, 44, 41, 39
};

const _rom int8_t vibrato_table[] = {
    2, 2, 3, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1,
    0, 1, 1, 0, 0, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -2,
    -1, -2, -2, -2, -2, -2, -2, -2, -2, -3, -2, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -1, -2, -1, -1, -1, -1, -1, 0, -1, 0, 0,
    0, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    2, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, -1, -1, 0,
    -1, -1, -1, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -3, -2, -2,
    -2, -2, -3, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -1, -1, -1,
    0, -1, -1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 2,
    1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 0, 1, 0, 0,
    0, 0, -1, 0, -1, -1, -1, -1, -1, -2, -1, -2, -2, -2, -2, -2,
    -2, -2, -2, -2, -2, -2, -3, -2, -2, -2, -2, -2, -2, -2, -2, -1,
    -2, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 1, 1, 0,
    1, 1, 1, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 3, 2, 2,
};
'''

def expand(s):
    r = []
    for i in range(len(s)):
        l = [0] * MEASURE_LEN
        l[::MEASURE_LEN//len(s[i])] = s[i]
        r += l
    return r

def map_song(s, f):
    return [f(k) if k not in [0, STOP] else k for k in s]

STOP = 0xFFFF
QUARTER_DUTY = 0x100
HALF_VOLUME = 0x200
VIBRATO = 0x400

MEASURE_LEN = 96

melody = [
[59, 57, STOP, 56],
[0, 0, 52, STOP],
[49, 0, 0, 0],
[STOP, 0, 52, STOP],

[49, 0, STOP, 49],
[0, 0, 52, STOP],
[56, 57, 0, 0, 56, 0, STOP, 0],
[54, 0, 51, STOP],

[51, 52, 0, STOP, 0, 0, 52, 0],
[STOP, 0, 52, STOP],
[0, 0, 0, 0],
[0, 0, 0, 0],

[0, 0, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],
[0, 0, 56, 57],

###

[59, 57, STOP, 56],
[0, 0, 52, STOP],
[49, 0, 0, 0],
[STOP, 0, 52, STOP],

[49, 0, STOP, 49],
[0, 0, 52, STOP],
[56, 57, 0, 0, 56, 0, STOP, 0],
[54, 0, 59, STOP],

[51, 52, 0, STOP, 0, 0, 52, 0],
[STOP, 0, 52, STOP],
[0, 0, 0, 0],
[0, 0, 0, 0, 0, 59, 61, 63],

[64, STOP, 0, 64],
[STOP, 0, 64, STOP],
[0, 0, 0, 0],
[0, 0, 0, 0, 51, 52, 0, 0],

###

[49, 0, 0, 0],
[0, 0, 52, 59],
[0, 0, 57, 0],
[56, 0, 59, 56],

[0, 0, 0, 0],
[52, 0, 54, 52],
[0, 0, 0, 0],
[0, STOP, 52, 0],

[49, 0, 0, 0],
[51, 0, 52, 48],
[0, 0, 51, 0],
[52, 0, 54, STOP],

[54, 0, 0, 0],
[52, 0, 54, 56],
[0, 0, 0, 0],
[0, 0, STOP, 0],

###

[52, 0, 0, 0],
[49, 0, 52, 59],
[0, 0, 57, 0],
[56, STOP, 64, 0],

[63, 0, 59, STOP],
[56, 0, 59, 52],
[0, 0, 0, 0],
[0, STOP, 52, 0],

[49, 0, 0, 0],
[0, 0, 52, 0],
[51, 52, 0, 0, 0, 0, 0, 0],
[54, 0, 0, 0],

[52, 0, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],
[STOP, 0, 56, 57]
]

'''
bass = [
[16, 0, 0, 11],
[0, 0, 16, 0],
[0, 0, 9, 0],
[9, 0, 8, 0],

[6, 0, 0, 13],
[0, 0, 6, 0],
[0, 0, 11, 0],
[11, 0, 0, 0],

[16, 0, 0, 16],
[0, 0, 16, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],

[16, 0, 0, 16],
[0, 0, 16, 0],
[0, 0, 11, 0],
[13, 0, 15, 0],

###

[16, 0, 0, 16],
[0, 0, 8, 0],
[0, 0, 9, 0],
[9, 0, 8, 0],

[6, 0, 0, 13],
[0, 0, 6, 0],
[0, 0, 11, 0],
[11, 0, 0, 0],

[16, 0, 0, 16],
[0, 0, 16, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],

[16, 0, 0, 16],
[0, 0, 16, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],

###

[9, 0, 0, 9],
[16, 0, 0, 0],
[14, 0, 0, 14],
[21, 0, 0, 21],

[8, 0, 0, 8],
[15, 0, 0, 0],
[7, 0, 0, 7],
[14, 0, 0, 14],

[6, 0, 0, 6],
[13, 0, 0, 13],
[8, 0, 0, 8],
[15, 0, 0, 15],

[11, 0, 0, 11],
[18, 0, 0, 0],
[10, 0, 0, 10],
[10, 0, 0, 10],

###

[9, 0, 0, 9],
[16, 0, 0, 16],
[21, 0, 0, 21],
[16, 0, 0, 16],

[8, 0, 0, 8],
[15, 0, 0, 15],
[13, 0, 0, 13],
[8, 0, 0, 8],

[6, 0, 0, 6],
[13, 0, 0, 13],
[17, 0, 0, 17],
[12, 0, 0, 12],

[4, 0, 0, 4],
[11, 0, 0, 11],
[16, 0, 0, 16],
[11, 0, 0, 11],

]
'''

guitar = [
[28, 32, 35, 40, 0, 0, 28, 32],
[35, 40, 0, 0, 28, 32, 35, 40],
[0, 0, 0, 0, 25, 28, 33, 37],
[25, 28, 33, 37, 0, 0, 0, 0],

[30, 33, 37, 40, 0, 0, 30, 33],
[37, 40, 0, 0, 30, 33, 37, 40],
[0, 0, 0, 0, 25, 28, 33, 37],
[27, 30, 35, 39, 0, 0, 0, 0],

[28, 32, 35, 40, 0, 0, 28, 32],
[35, 40, 0, 0, 28, 32, 35, 40],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],

[28, 32, 35, 40, 0, 0, 28, 32],
[35, 40, 0, 0, 28, 32, 35, 40],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],

###

[28, 32, 35, 40, 0, 0, 28, 32],
[35, 40, 0, 0, 28, 32, 35, 40],
[0, 0, 0, 0, 25, 28, 33, 37],
[25, 28, 33, 37, 0, 0, 0, 0],

[30, 33, 37, 40, 0, 0, 30, 33],
[37, 40, 0, 0, 30, 33, 37, 40],
[0, 0, 0, 0, 25, 28, 33, 37],
[27, 30, 35, 39, 0, 0, 0, 0],

[28, 32, 35, 40, 0, 0, 28, 32],
[35, 40, 0, 0, 28, 32, 35, 40],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],

[28, 32, 35, 40, 0, 0, 28, 32],
[35, 40, 0, 0, 28, 32, 35, 40],
[0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0],

###

[21, 32, 37, 40],
[28, 32, 37, 40],
[26, 33, 36, 40],
[21, 36, 40, 43],

[20, 30, 35, 39],
[27, 30, 35, 39],
[19, 34, 38, 41],
[26, 29, 34, 38],

[18, 28, 33, 37],
[25, 28, 33, 37],
[20, 30, 36, 39],
[24, 30, 36, 39],

[23, 33, 38, 42],
[18, 30, 35, 38],
[22, 32, 36, 40],
[22, 28, 32, 37],

###
[21, 32, 37, 40],
[28, 32, 37, 40],
[21, 30, 35, 39],
[21, 35, 39, 42],

[20, 30, 35, 39],
[27, 30, 35, 39],
[25, 29, 35, 38],
[20, 29, 35, 38],

[18, 28, 33, 37],
[15, 28, 33, 37],
[17, 28, 33, 36],
[24, 33, 36, 40],

[16, 32, 35, 39],
[23, 28, 32, 35],
[16, 35, 39, 44],
[23, 32, 35, 39],

]

piano = [
[44, 52, 0, 0, 0, 0, 44, 52],
[0, 0, 0, 0, 44, 52, 0, 0],
[0, 0, 0, 0, 40, 49, 0, 0],
[40, 49, 0, 0, 0, 0, 0, 0],

[45, 49, 0, 0, 0, 0, 45, 49],
[0, 0, 0, 0, 45, 49, 0, 0],
[0, 0, 0, 0, 45, 49, 0, 0],
[42, 51, 0, 0, 0, 0, 0, 0],

[44, 52, 0, 0, 0, 0, 44, 52],
[0, 0, 0, 0, 44, 52, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],

[47, 52, 0, 0, 0, 0, 47, 52],
[0, 0, 0, 0, 47, 52, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],

###

[44, 52, 0, 0, 0, 0, 44, 52],
[0, 0, 0, 0, 44, 52, 0, 0],
[0, 0, 0, 0, 45, 49, 0, 0],
[45, 49, 0, 0, 0, 0, 0, 0],

[45, 49, 0, 0, 0, 0, 45, 49],
[0, 0, 0, 0, 45, 49, 0, 0],
[0, 0, 0, 0, 45, 52, 0, 0],
[45, 54, 0, 0, 0, 0, 0, 0],

[44, 52, 0, 0, 0, 0, 44, 52],
[0, 0, 0, 0, 44, 52, 0, 0],
[0, 0, 0, 0],
#[0, 0, 0, 0, 0, 59, 61, 63],
[0, 0, 0, 0],

[56, 64, 0, 0, 0, 0, 56, 64],
[0, 0, 0, 0, 56, 64, 0, 0],
[0, 0, 0, 0],
[0, 0, 0, 0],

###

[0, 0, 49, 0],
[51, 52, 0, 59],
[0, 0, 57, 0],
[56, 0, 59, 0],

[0, 0, 0, 0, 51, 52, 0, 0],
[54, 56, 0, 54],
[0, 52, 0, 50],
[52, 0, 50, 0],

[0, 0, 45, 44],
[45, 47, 49, 48],
[0, 48, 51, 52],
[54, 56, 57, 59],

[64, 0, 62, 0],
[61, 0, 59, 0, 0, 0, 58, 59],
[0, 57, 0, 0],
[56, 0, 54, 0],

###

[0, 0, 51, 52],
[49, 51, 0, 52],
[0, 52, 54, 56],
[57, 59, 61, 63],

[64, 0, 63, 0],
[64, 0, 66, 0, 0, 0, 66, 68],
[0, 66, 0, 64],
[63, 0, 62, 0],

[0, 0, 0, 0, 59, 61, 0, 0],
[59, 57, 0, 56],
[0, 56, 57, 59],
[56, 0, 52, 0],

[52, 0, 47, 52],
[0, 47, 0, 45],
[0, 44, 45, 0],
[42, 0, 40, 0],

]


song = map_song(expand(melody), lambda x: x | HALF_VOLUME | VIBRATO)
# bass = map_song(expand(bass), lambda x: (x+12) | QUARTER_DUTY)
guitar = map_song(expand(guitar), lambda x: x | HALF_VOLUME)
piano = map_song(expand(piano), lambda x: x | QUARTER_DUTY)

# 11 cells after each note guaranteed to be blank
current_note = 0
interrupted = False
for i in range(len(song)):
    if song[i] != 0:
        current_note = song[i]

    if i % (MEASURE_LEN//8) == 2 and guitar[i-2] != 0:
        song[i] = guitar[i-2]
        interrupted = True
        
    if i % (MEASURE_LEN//8) == 6 and interrupted:
        song[i] = current_note
        interrupted = False

    if i % (MEASURE_LEN//8) == 6 and piano[i-6] != 0:
        song[i] = piano[i-6]
        interrupted = True

    if i % (MEASURE_LEN//8) == 10 and interrupted:
        song[i] = current_note
        interrupted = False

# pickup
song = song[-MEASURE_LEN//2:] + song[:-MEASURE_LEN//2]

print(len(song))

with open(os.path.join(dirname, '../src/music.h'), 'w') as f:
    f.write(header)
    f.write('const _rom uint16_t song[] = {\n')
    for i in range(0, len(song), MEASURE_LEN):
        f.write("    "+", ".join(str(k) for k in song[i:i+MEASURE_LEN])+",\n")
        print(song[i:i+MEASURE_LEN])
    f.write('};\n')
